<?php
{% if entityInformation.canQuery ~%}
use Anteris\Autotask\API\{{ entityName.plural }}\{{ entityName.singular }}Collection;
{%~ endif %}
use Anteris\Autotask\API\{{ entityName.plural }}\{{ entityName.singular }}Service;
use Anteris\Autotask\API\{{ entityName.plural }}\{{ entityName.singular }}Entity;
{% if entityInformation.canQuery ~%}
use Anteris\Autotask\API\{{ entityName.plural }}\{{ entityName.singular }}QueryBuilder;
{%~ endif %} 
use Tests\AbstractTest;
use Tests\Mocks\ClientMock;

/**
 * Runs tests for {{ entityName.singular }}Service.
 */
class {{ entityName.singular }}ServiceTest extends AbstractTest
{
    /**
     * @covers {{ entityName.singular }}Service
     */
    public function test_service_creation()
    {
        $this->assertInstanceOf(
            {{ entityName.singular }}Service::class,
            $this->client->{{ entityName.plural|first|lower }}{{ entityName.plural|slice(1) }}()
        );
    }
{% if entityInformation.canQuery and "Webhook" not in entityName.plural ~%}
    /**
     * @covers {{ entityName.singular }}Service
     */
    public function test_query_returns_collection()
    {
        $result = $this->client->{{ entityName.plural|first|lower }}{{ entityName.plural|slice(1) }}()->query()->where('id', 'exist')->records(1)->get();

        // Make sure its a collection
        $this->assertInstanceOf(
            {{ entityName.singular }}Collection::class,
            $result
        );
    }

    /**
     * @covers {{ entityName.singular }}Collection
     */
    public function test_collection_contains_{{ entityName.singularSnake }}_entities()
    {
        $result = $this->client->{{ entityName.plural|first|lower }}{{ entityName.plural|slice(1) }}()->query()->where('id', 'exist')->records(1)->get();

        // Make sure the collection has entities
        if (count($result) > 0) {
            $this->assertInstanceOf(
                {{ entityName.singular }}Entity::class,
                $result->offsetGet(0)
            );
        } else {
            $this->assertCount(0, $result);
        }
    }

    /**
     * @covers {{ entityName.singular }}Service
     */
    public function test_query_method_returns_query_builder()
    {
        $this->assertInstanceOf(
            {{ entityName.singular }}QueryBuilder::class,
            $this->client->{{ entityName.plural|first|lower }}{{ entityName.plural|slice(1) }}()->query()
        );
    }
{% endif %}

    public function test_entity_can_be_constructed_from_array()
    {
        $values = ClientMock::mockValues({{ entityName.singular }}Entity::class);

        $entity = new {{ entityName.singular }}Entity($values);
        foreach($values as $key => $value) {
            $actual = $entity->{$key};
            $this->assertEquals($value, $actual, "Value of {$key} does not equal expected.");
        }
    }
}
